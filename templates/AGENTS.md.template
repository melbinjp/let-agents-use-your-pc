# Hardware Access for Jules

This repository has **remote hardware access** configured for Jules to test code on real hardware.

## Available Hardware

### This Hardware

- **Platform**: {PLATFORM}
- **CPU**: {CPU_COUNT} cores
- **Memory**: {MEMORY_GB} GB
- **GPU**: {GPU_INFO}
- **Docker**: {DOCKER_STATUS}
- **Connection**: `.jules/hardware_connection.json`

### Multiple Hardware Support

If you have multiple hardware setups, you can add more connection files:
- `.jules/windows_laptop.json` - Windows laptop
- `.jules/linux_server.json` - Linux server
- `.jules/gpu_workstation.json` - GPU workstation

See [DYNAMIC_HARDWARE_SWITCHING.md](../DYNAMIC_HARDWARE_SWITCHING.md) for details.

## Connection

Jules can access hardware through connection files in the `.jules/` directory.

**Single hardware:**
```
Use .jules/hardware_connection.json
```

**Multiple hardware (specify in prompt):**
```
I have multiple hardware options:
- Windows: .jules/windows_laptop.json
- Linux: .jules/linux_server.json

Please use the Linux server for this task.
```

## What Jules Can Do

- ‚úÖ Run tests on real {PLATFORM} hardware
- ‚úÖ Execute commands with full system access
- ‚úÖ Use Docker for containerized testing
- ‚úÖ Access GPU for ML/AI workloads (if available)
- ‚úÖ Install dependencies and packages
- ‚úÖ Run performance benchmarks
- ‚úÖ Test platform-specific features

## Usage

Jules will automatically discover this hardware when working on tasks. Simply mention in your prompt:

```
I have hardware available at .jules/hardware_connection.json

Please test this on real hardware.
```

## MCP Tools Available

Jules can use these tools to interact with the hardware:

### execute_command
Execute any command on the hardware.
```json
{
  "tool": "execute_command",
  "arguments": {
    "command": "pytest tests/",
    "working_directory": "/tmp/jules_workspace",
    "bypass_security": true
  }
}
```

### docker_operations
Manage Docker containers.
```json
{
  "tool": "docker_operations",
  "arguments": {
    "operation": "run",
    "image": "python:3.9",
    "command": "pytest tests/"
  }
}
```

### environment_setup
Set up development environments.
```json
{
  "tool": "environment_setup",
  "arguments": {
    "environment_type": "python",
    "requirements": ["pytest", "numpy"],
    "workspace_path": "/tmp/jules_workspace"
  }
}
```

### system_monitoring
Monitor system resources.
```json
{
  "tool": "system_monitoring",
  "arguments": {
    "metrics": ["cpu", "memory", "gpu", "disk"]
  }
}
```

## Security

- üîê SSH key authentication only
- üìù All activity logged on hardware
- üö¶ Rate limited (120 requests/minute)
- üë§ Runs as dedicated user account

## Notes

- Hardware must be online and MCP server running
- All Jules activity is logged for audit
- Connection is secure via SSH tunnel
- You can monitor activity in real-time

---

**Setup Date**: {SETUP_DATE}
**Connection File**: `.jules/hardware_connection.json`
**Documentation**: See MCP hardware server docs for details
